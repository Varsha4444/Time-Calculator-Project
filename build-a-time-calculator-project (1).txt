** start of main.py **

def add_time(start, duration, start_day=None):
    # Parse the start time
    time_part, period = start.split()
    hours, minutes = map(int, time_part.split(':'))
    
    # Convert to 24-hour format
    if period == 'PM' and hours != 12:
        hours += 12
    elif period == 'AM' and hours == 12:
        hours = 0
    
    # Parse the duration
    dur_hours, dur_minutes = map(int, duration.split(':'))
    
    # Add duration to start time
    total_minutes = minutes + dur_minutes
    extra_hours = total_minutes // 60
    total_minutes = total_minutes % 60
    
    total_hours = hours + dur_hours + extra_hours
    extra_days = total_hours // 24
    total_hours = total_hours % 24
    
    # Convert back to 12-hour format
    if total_hours == 0:
        new_period = 'AM'
        new_hours = 12
    elif total_hours < 12:
        new_period = 'AM'
        new_hours = total_hours
    elif total_hours == 12:
        new_period = 'PM'
        new_hours = 12
    else:
        new_period = 'PM'
        new_hours = total_hours - 12
    
    # Format the new time
    new_time = f"{new_hours}:{total_minutes:02d} {new_period}"
    
    # Handle the day of the week if provided
    if start_day:
        days_of_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        start_day_lower = start_day.lower()
        day_index = None
        for i, day in enumerate(days_of_week):
            if day.lower() == start_day_lower:
                day_index = i
                break
        if day_index is not None:
            new_day_index = (day_index + extra_days) % 7
            new_day = days_of_week[new_day_index]
            new_time += f", {new_day}"
    
    # Handle the days later part
    if extra_days == 1:
        new_time += " (next day)"
    elif extra_days > 1:
        new_time += f" ({extra_days} days later)"
    
    return new_time

** end of main.py **

